'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _merge3 = require('lodash/fp/merge');

var _merge4 = _interopRequireDefault(_merge3);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _unionBy2 = require('lodash/unionBy');

var _unionBy3 = _interopRequireDefault(_unionBy2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _size2 = require('lodash/size');

var _size3 = _interopRequireDefault(_size2);

var _createReducer;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = orderedReducer;

var _constants = require('../constants');

var _reducers = require('../utils/reducers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DOCUMENT_ADDED = _constants.actionTypes.DOCUMENT_ADDED,
    GET_SUCCESS = _constants.actionTypes.GET_SUCCESS,
    LISTENER_RESPONSE = _constants.actionTypes.LISTENER_RESPONSE,
    CLEAR_DATA = _constants.actionTypes.CLEAR_DATA,
    DELETE_SUCCESS = _constants.actionTypes.DELETE_SUCCESS,
    DOCUMENT_REMOVED = _constants.actionTypes.DOCUMENT_REMOVED,
    DOCUMENT_MODIFIED = _constants.actionTypes.DOCUMENT_MODIFIED;

function modifyDoc(collectionState, action) {
  if (!action.meta.subcollections || action.meta.storeAs) {
    return (0, _reducers.updateItemInArray)(collectionState, action.meta.doc, function (item) {
      return (0, _merge4.default)(item, action.payload.data);
    });
  }

  var _pathToArr = (0, _reducers.pathToArr)(action.meta.path),
      _pathToArr2 = _slicedToArray(_pathToArr, 4),
      docId = _pathToArr2[1],
      subcollectionName = _pathToArr2[2],
      subDocId = _pathToArr2[3];

  return (0, _reducers.updateItemInArray)(collectionState, docId, function (item) {
    return _extends({}, item, _defineProperty({}, subcollectionName, (0, _reducers.updateItemInArray)((0, _get3.default)(item, subcollectionName, []), subDocId, function (subitem) {
      return (0, _merge4.default)(subitem, action.payload.data);
    })));
  });
}

function addDoc() {
  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  var meta = action.meta,
      payload = action.payload;

  if (!meta.subcollections || meta.storeAs) {
    return [].concat(_toConsumableArray(array.slice(0, payload.ordered.newIndex)), [_extends({ id: meta.doc }, payload.data)], _toConsumableArray(array.slice(payload.ordered.newIndex)));
  }

  return modifyDoc(array, action);
}

function removeDoc(array, action) {
  if (!action.meta.subcollections) {
    return (0, _reject3.default)(array, { id: action.meta.doc });
  }

  var subcollectionSetting = action.meta.subcollections[0];

  if (!subcollectionSetting.doc) {
    return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
      return (0, _omit3.default)(item, [action.meta.subcollections[0].collection]);
    });
  }

  return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
    var subcollectionVal = (0, _get3.default)(item, subcollectionSetting.collection, []);

    if (subcollectionVal.length) {
      return _extends({}, item, _defineProperty({}, subcollectionSetting.collection, removeDoc(subcollectionVal, {
        meta: subcollectionSetting
      })));
    }

    return item;
  });
}

function writeCollection(collectionState, action) {
  var meta = action.meta,
      _action$merge = action.merge,
      merge = _action$merge === undefined ? { doc: true, collection: true } : _action$merge;

  var collectionStateSize = (0, _size3.default)(collectionState);

  if (meta.doc && merge.doc && collectionStateSize) {
    return modifyDoc(collectionState, action);
  }

  if (merge.collection && collectionStateSize) {
    return (0, _unionBy3.default)(collectionState, action.payload.ordered, 'id');
  }

  if (meta.doc && meta.subcollections && !meta.storeAs) {
    if (!collectionStateSize) {
      return [_defineProperty({
        id: meta.doc
      }, meta.subcollections[0].collection, action.payload.ordered)];
    }

    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return (0, _merge4.default)(item, _defineProperty({}, meta.subcollections[0].collection, action.payload.ordered));
    });
  }

  if (meta.doc && collectionStateSize) {
    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return (0, _merge4.default)(item, action.payload.ordered[0]);
    });
  }

  return action.payload.ordered;
}

var orderedCollectionReducer = (0, _reducers.createReducer)(undefined, (_createReducer = {}, _defineProperty(_createReducer, DOCUMENT_ADDED, addDoc), _defineProperty(_createReducer, DOCUMENT_MODIFIED, modifyDoc), _defineProperty(_createReducer, DOCUMENT_REMOVED, removeDoc), _defineProperty(_createReducer, DELETE_SUCCESS, removeDoc), _defineProperty(_createReducer, LISTENER_RESPONSE, writeCollection), _defineProperty(_createReducer, GET_SUCCESS, writeCollection), _createReducer));

function orderedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  if (!action.meta || !action.meta.storeAs && !action.meta.collection) {
    return state;
  }
  if (action.type === CLEAR_DATA) {
    if (action.preserve && action.preserve.ordered) {
      return (0, _reducers.preserveValuesFromState)(state, action.preserve.ordered, {});
    }
    return {};
  }
  var storeUnderKey = action.meta.storeAs || action.meta.collection;
  var collectionStateSlice = (0, _get3.default)(state, storeUnderKey);
  return _extends({}, state, _defineProperty({}, storeUnderKey, orderedCollectionReducer(collectionStateSlice, action)));
}